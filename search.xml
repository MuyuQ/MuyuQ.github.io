<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2020/07/21/test/"/>
      <url>/2020/07/21/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/21/hello-world/"/>
      <url>/2020/07/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 进阶模块</title>
      <link href="/2018/03/13/Nginx%20%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/03/13/Nginx%20%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>简介  </p><a id="more"></a>  <p>##静态资源配置</p><p>配置语法- sendfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: sendfile on | off;</span><br><span class="line">Default: sendfile off;</span><br><span class="line">Context: server,location,if in location</span><br></pre></td></tr></table></figure><p>配置语法- tcp-nopush</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: tcp_nopush on | off</span><br><span class="line">Default: tcp_push off;</span><br><span class="line">Context: http,server,location</span><br><span class="line"><span class="meta">#</span><span class="bash">在 sendfile 开启的情况下, 提高网络包的传递效率</span></span><br></pre></td></tr></table></figure><p>不着急推送,而是将多个 tcp 打包进行集中发送,以提升效率.适合大文件</p><p>配置语法- tcp-nodelay</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: tcp_nodelay on | off</span><br><span class="line">Default: tcp_nodelay on;</span><br><span class="line">Context: http,server,location</span><br><span class="line"><span class="meta">#</span><span class="bash">在 keepalive 连接下,提高网络包的传递实时性</span></span><br></pre></td></tr></table></figure><p>配置语法-压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">压缩等级设置</span></span><br><span class="line">Syntax: gzip_comp_level level;</span><br><span class="line">Default: gzip_comp_level 1;</span><br><span class="line">Context: http,server,location</span><br></pre></td></tr></table></figure><p>扩展 Nginx 压缩模块</p><p><strong><code>http_gzip_static_module</code></strong>-预读 gzip 功能. </p><p><strong><code>http_gunzip_module</code></strong>-应用支持 gunzip 的压缩功能. (很少用到)</p><p>gzip 对文本的压缩很好,对图片的压缩一般.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p>HTTP 协议定义的缓存机制(如 Expires,Cache-control等)</p><p>校验过期机制</p><table><thead><tr><th>校验是否过期</th><th>Expires(http1.0),Cache-Control(http1.1) (max-age定义一个周期)</th></tr></thead><tbody><tr><td>如果 max-age 显示已经过期,则会检查后面两个校验</td><td></td></tr><tr><td>协议中 Etag头信息校验</td><td>Etag(保存一个字符串,来识别缓存,类似”别名”)</td></tr><tr><td>Last-Modified 头信息校验</td><td>Last-Modified(保存一个时间,精确到秒,如果两个时间不一致,则服务器会传递一份新的)</td></tr></tbody></table><p>Max-age&lt;=0时,就要求每次请求都会要求服务器检查是否过期.即使服务器端设置了 max-age, 但是浏览器为了实时更新,会将 request里 max-age 设置为0.</p><p><img src="http://ojho2g8px.bkt.clouddn.com/WX20180312-121814@2x.png" alt=""></p><p>静态资源配置场景设置</p><p>配置语法-expires</p><p>location / {</p><p>expires  24h;</p><p>}</p><h2 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h2><p>为什么浏览器禁止跨域访问?</p><p>不安全,容易出现 CSRF 攻击.</p><p>nginx 怎么做?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: add_header name value [always];</span><br><span class="line">Default: - </span><br><span class="line">Context: http,server,location,if in location</span><br></pre></td></tr></table></figure><p>如果服务器允许跨域访问,则浏览器不会禁止. 通过检查Access-Control-Allow-Origin 头来确定是否允许.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(htm|html)$ &#123;</span><br><span class="line">    add_header Access-Control-Allow-Origin http://www.qq.com;</span><br><span class="line">    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将 域名替换成*,则会对 CSRF 攻击完全开放.</p><p>##防盗链</p><p>简单防盗链实现.</p><p>防盗链设置思路.</p><p>首要方式:区别哪些请求是非正常的用户请求</p><p>基于 http_refer 防盗链配置模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> valid_referers表示允许哪些referer信息访问 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">none表示允许没有带referer的信息过来    </span></span><br><span class="line"><span class="meta">#</span><span class="bash">blocked表示</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ip 只允许这个ip的referer过来访问.</span></span><br><span class="line">valid_referers none blocked ip ;</span><br><span class="line"><span class="meta">if($</span><span class="bash">invalid_referer)&#123;</span></span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>‘referer’</strong>是告诉服务器这个请求是从哪个页面链接过来的.</p><p>如果直接访问页面,则在 access.log 里面为 “-“.</p><p>进阶解决方案:</p><p>后期补充</p><h2 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h2><p>正向代理</p><blockquote><p>客户端—代理—|— 服务端</p></blockquote><p>反向代理</p><blockquote><p>客户端—|—代理—服务端</p></blockquote><p>区别在于代理的对象不一样.</p><p>正向代理代理的对象是客户端.</p><p>反向代理代理的对象是服务端.</p><h4 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: proxy_pass URL;</span><br><span class="line">Default: -</span><br><span class="line">Context: location,if in location,limit_except</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">http://ip:80/url/</span></span><br></pre></td></tr></table></figure><p>服务器 A (10.211.55.15)  服务器 B(10.211.55.16)</p><p>服务器A,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    if($http_x_forwarded_for !~*"^10\.211\.55\.16")&#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置后,所有不是来自服务器 B 的访问,都会被返回403.</p><p>服务器 B,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line">    proxy_pass $http_host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 uri 和 url 是不同的.</p><p>uri 统一资源标志符, url 统一资源定位符.</p><p>一个用于解析,一个用于直接传递路径.</p><p>其他语法配置</p><p><strong><code>proxy_buffering</code></strong>缓冲区</p><p><strong><code>proxy_redirect</code></strong>跳转重定向</p><p><strong><code>proxy_set_header</code></strong> 头信息 ,扩展 proxy_hide_header,proxy_set_body</p><p><strong><code>proxy_connect_timeout</code></strong>  超时 ,扩展 proxy_read_timeout,proxy_send_timeout</p><h3 id="proxy-常用配置"><a href="#proxy-常用配置" class="headerlink" title="proxy 常用配置"></a>proxy 常用配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">proxy_redirect default;</span><br><span class="line"></span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line"></span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffers 4 128k;</span><br><span class="line">proxy_busy_buffers_size 256k;</span><br><span class="line">proxy_max_temp_file_size 256k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个 proxy 方案,则可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    include proxy_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把配置放在文件里.</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
