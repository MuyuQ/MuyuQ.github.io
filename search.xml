<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>char和varchar区别</title>
      <link href="/2020/10/14/DB/title%20char%E5%92%8Cvarchar%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/10/14/DB/title%20char%E5%92%8Cvarchar%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><ol><li><p>char固定长度, varchar可变长度</p></li><li><p>如果实际存入数据长度小于指定长度,char会填充空格到指定长度,varhcar会缩短到实际长度.</p></li><li><p>如果实际存入数据长度大于指定长度,两者低版本会截取,高版本会报错</p></li><li><p>char效率比varchar高,但是相对而言费存储空间. 因为varchar会多一个字节记录长度.每次修改完数据后都会重新计算一次,导致效率变慢.</p></li><li><p>char在内存和硬盘上都会按照最大的指定长度分配空间,而varchar在硬盘上会按照实际长度分配空间,在内存上按照指定长度分配空间.这导致两个问题</p><p>5.1 如果将varchar指定长度非常大,会导致内存占用很高,反而不利.</p><p>5.2 如果定义varchar(30),更改前字符长度为10,系统分配了10个存储单位.但更改后字符长度变为20,还在最大长度范围内,但是原存储位置无法满足其存储需求.系统需要进行额外的操作,比如拆分和分页.</p></li><li><p>MyISAM表推荐使用char,缺点是占用磁盘</p><p>InnoDB表,推荐使用varchar.</p><p>如果存储的信息很短,那么推荐使用char,  因为varchar还有额外的开销.</p><p>如果是长度固定的数据,比如说uid,char更适合.</p><p>如果是频繁改动的column,推荐使用char,因为varchar每次都有额外的长度计算工作.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中一些小知识点</title>
      <link href="/2020/09/21/Python/%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/2020/09/21/Python/%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="一些需要注意的地方"><a href="#一些需要注意的地方" class="headerlink" title="一些需要注意的地方"></a>一些需要注意的地方</h1><h2 id="1-sqlalchemy中的filter-filter-by-有什么区别"><a href="#1-sqlalchemy中的filter-filter-by-有什么区别" class="headerlink" title="1.sqlalchemy中的filter(),filter_by()有什么区别"></a>1.sqlalchemy中的filter(),filter_by()有什么区别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.session.query.filter(Wish.launched == <span class="literal">False</span>)</span><br><span class="line">db.session.query.filter_by(uid=uid, launched=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 一个是关键字参数, 一个是条件表达式</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-继承第三方库的某个类"><a href="#2-继承第三方库的某个类" class="headerlink" title="2. 继承第三方库的某个类"></a>2. 继承第三方库的某个类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Query</span><span class="params">(BaseQuery)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_by</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">      <span class="comment"># kwargs是字典</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'status'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs.keys():</span><br><span class="line">            kwargs[<span class="string">'status'</span>] = <span class="number">1</span></span><br><span class="line">            <span class="comment"># 重写完成后,继承基类</span></span><br><span class="line">        <span class="keyword">return</span> super(Query,self).filter_by(**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在SQLAlchemy中留了继承基类的接口  </span></span><br><span class="line">db = SQLAlchemy(query_class=Query)</span><br></pre></td></tr></table></figure><hr><h2 id="3-链式调用触发sql严格模式-sql-mode"><a href="#3-链式调用触发sql严格模式-sql-mode" class="headerlink" title="3.链式调用触发sql严格模式(sql_mode)"></a>3.链式调用触发sql严格模式(sql_mode)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">recent</span><span class="params">(cls)</span>:</span></span><br><span class="line">     <span class="comment"># 链式调用</span></span><br><span class="line">     recent_gift = Gift.query.filter_by(launched=<span class="literal">False</span>).group_by(</span><br><span class="line">         Gift.isbn).order_by(Gift.create_time).limit(</span><br><span class="line">         current_app.config[<span class="string">'RECENT_BOOK_COUNT'</span>]).distinct()</span><br><span class="line">     <span class="keyword">return</span> recent_gift</span><br></pre></td></tr></table></figure><p>需要一下方法解锁严格模式.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL sql_mode&#x3D;(SELECT REPLACE(@@sql_mode,&#39;ONLY_FULL_GROUP_BY&#39;,&#39;&#39;));</span><br></pre></td></tr></table></figure><h2 id="4-原始数据–-gt-视图数据-需要通过视图模型-viewmodel"><a href="#4-原始数据–-gt-视图数据-需要通过视图模型-viewmodel" class="headerlink" title="4.原始数据–&gt;视图数据,需要通过视图模型(viewmodel)"></a>4.原始数据–&gt;视图数据,需要通过视图模型(viewmodel)</h2><h2 id="5-session-query查询"><a href="#5-session-query查询" class="headerlink" title="5.session.query查询"></a>5.session.query查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_wish_count</span><span class="params">(cls, isbn_list)</span>:</span></span><br><span class="line">     <span class="comment"># 根据传入的一组isbn,到Wish表中检索出某个的礼物,并计算出某个礼物的心愿数量</span></span><br><span class="line">     <span class="comment"># db.session</span></span><br><span class="line">     <span class="comment"># mysql in查询</span></span><br><span class="line">     db.session.query(func.count(Wish.id), Wish.isbn).filter(</span><br><span class="line">                                     Wish.launched == <span class="literal">False</span>,</span><br><span class="line">                                     Wish.isbn.in_(isbn_list),</span><br><span class="line">                                     Wish.status == <span class="number">1</span>).group_by(Wish.isbn).all()</span><br></pre></td></tr></table></figure><p>这种写法非常Python,要看多学多写.</p><p>db.session.query(根据检索条件返回的数据)</p><h2 id="6-避免循环导入"><a href="#6-避免循环导入" class="headerlink" title="6.避免循环导入"></a>6.避免循环导入</h2><p>当我们import一个文件时，python会首先去查找这个文件之前是否被import过，如果这个文件之前有被import过，就不会重新再import一次。所以如果A模块 代码里import了B模块，并且B模块里又import了A模块，python的执行顺序会变成这样：开始执行模块A当A执行到import B的地方，则停止执行A模块后面的代码，转而开始执行B模块的代码当B模块从头执行到import A的地方时，python此时并不会回过头去接着执行A剩余的代码，而且将A模块在中断前已经初始化的属性全加载到B模块中</p><p>1.在函数内部使用import,俗称 延迟导入.会影响性能.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br></pre></td></tr></table></figure><p>2.将引起循环导入的变量放到导入模块import代码前.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src.user = <span class="literal">None</span></span><br><span class="line"><span class="keyword">from</span> core <span class="keyword">import</span> src</span><br></pre></td></tr></table></figure><h2 id="7-捕获KeyboardInterrupt异常"><a href="#7-捕获KeyboardInterrupt异常" class="headerlink" title="7.捕获KeyboardInterrupt异常"></a>7.捕获KeyboardInterrupt异常</h2><p>运行命令行程序期间,如果用户想终止程序,一般都会才用ctrl-c来终止程序运行,程序会抛出KeyboardInterrupt异常.</p><p>可以通过这一机制来实现我们想要的功能.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(<span class="string">'按下回车开始'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    input(<span class="string">''</span>)</span><br><span class="line">    starttime = time.time()</span><br><span class="line">    print(<span class="string">'开始'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'计时'</span>,round(time.time()-starttime))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    print(<span class="string">'结束'</span>)</span><br><span class="line">    print(<span class="string">'总计耗时间:'</span>,round(time.time()-starttime))</span><br></pre></td></tr></table></figure><p>通过抛出异常来终止while循环,从而实现计时器功能.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flaks配置文件相关</title>
      <link href="/2020/07/28/Flaks%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/07/28/Flaks%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>Flask的配置文件实际上是字典的一个子类,且能够像字典一样被修改.</p><p>一般使用config.py文件进行配置管理.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">'app.sercure'</span>)</span><br></pre></td></tr></table></figure><p>当需要使用多个配置文件时,可以进行多次导入.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(<span class="string">'app.sercure'</span>)</span><br><span class="line">app.config.from_object(<span class="string">'app.setting'</span>)</span><br></pre></td></tr></table></figure><p>也可以使用py文件保存配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config.from_pyfile(<span class="string">'config.py'</span>)</span><br></pre></td></tr></table></figure><p>有一种有趣的模式,可以为配置使用类和继承:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    DEBUG = <span class="literal">False</span></span><br><span class="line">    TESTING = <span class="literal">False</span></span><br><span class="line">    DATABASE_URI = <span class="string">'sqlite://:memory:'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    DATABASE_URI = <span class="string">'mysql://user@localhost/foo'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span><span class="params">(Config)</span>:</span></span><br><span class="line">    TESTING = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>在调用时使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config.from_object(<span class="string">'configmodule.ProductionConfig'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL语法基础</title>
      <link href="/2018/03/16/mysql%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/03/16/mysql%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>MySQL基础语法知识</p><a id="more"></a>  mysql 的知识点<p>显示表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc + 表名;  或者 explain + 表名</span><br></pre></td></tr></table></figure><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &#96;mydatabase&#96;;</span><br><span class="line">USE &#96;mydatabase&#96;;</span><br><span class="line">反引号并不是必须的, 但这是一种规范,防止在创建数据库或表的时候用到了 MySQL 的关键字.</span><br></pre></td></tr></table></figure><p>MySQL 关键字,最好全部用大写, 这是一种规范,最好遵守.</p><p>mysql 权限分离, 对于一个数据库,最好建立一个只读账户,防止失误.</p><p>mysql 中的注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--注释</span><br></pre></td></tr></table></figure><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;student&#96;(</span><br><span class="line">&#96;id&#96; INT NOT NULL AUTO_INCREMENT</span><br><span class="line"> &#96;name&#96; VARCHAR(200) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>常见类型</p><p>int char varchar datetime</p><p> char 长度固定,存储速度快</p><p> Varchar 长度可变,节省空间</p><h2 id="建表方案"><a href="#建表方案" class="headerlink" title="建表方案"></a>建表方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;students&#96;(</span><br><span class="line"> &#96;id&#96; INT NOT NULL AUTO_INCREMENT,</span><br><span class="line"> &#96;name&#96; VARCHAR(20) NOT NULL,</span><br><span class="line"> &#96;nackname&#96; VARCHAR(20) NOT NULL,</span><br><span class="line"> &#96;sex&#96; SMALLINT NOT NUll;</span><br><span class="line"> &#96;in_time&#96; DATETIME NULL,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>1.必须设置一个主键</p><p>2.必须用<code>,</code> 而不是<code>;</code></p><p>3.没有最后一行的<code>,</code></p><p><strong>4.需要设置默认的编码方式以支持中文.</strong></p><p>正确版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;students&#96;(</span><br><span class="line"> &#96;id&#96; INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line"> &#96;name&#96; VARCHAR(20) NOT NULL,</span><br><span class="line"> &#96;nackname&#96; VARCHAR(20) NOT NULL,</span><br><span class="line"> &#96;sex&#96; SMALLINT NOT NUll,</span><br><span class="line"> &#96;in_time&#96; DATETIME NULL</span><br><span class="line">)DEFAULT CHARSET &#39;UTF8&#39;;</span><br></pre></td></tr></table></figure><h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;students&#96; VALUE(1,&#39;张三&#39;,&#39;三哥&#39;,&#39;男&#39;,now());</span><br></pre></td></tr></table></figure><p>序号自增长插入</p><p>指定需要插入的字段名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;students&#96;(&#96;name&#96;,&#96;nickname&#96;,&#96;sex&#96;,&#96;in_time&#96;) VALUE(&#39;张三2&#39;,&#39;三哥2&#39;,&#39;男&#39;,now());</span><br></pre></td></tr></table></figure><p>如果有可以允许为空项,则可以放空.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;students&#96;(&#96;name&#96;,&#96;nickname&#96;,&#96;sex&#96;) VALUE(&#39;张三3&#39;,&#39;三哥3&#39;,&#39;男&#39;);</span><br></pre></td></tr></table></figure><p>插入多条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;students&#96;(&#96;name&#96;,&#96;nickname&#96;,&#96;sex&#96;) VALUES</span><br><span class="line">(&#39;张三4&#39;,&#39;三哥4&#39;,&#39;男&#39;),</span><br><span class="line">(&#39;张三5&#39;,&#39;三哥3&#39;,&#39;男&#39;),</span><br><span class="line">(&#39;张三6&#39;,&#39;三哥3&#39;,&#39;男&#39;);</span><br></pre></td></tr></table></figure><p><img src="http://ojho2g8px.bkt.clouddn.com/WX20180313-182104@2x.png" alt=""></p><p><strong><code>插一条,用 VALUE, 插多条用 VALUES.</code></strong></p><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &#96;name&#96;,&#96;nickname&#96; FROM &#96;students&#96; WHERE &#96;sex&#96;&#x3D;&#39;男&#39; ORDER BY &#96;id&#96; DESC LIMIT 1,2;</span><br></pre></td></tr></table></figure><p>排序中有正序和倒序, 默认为正序ASC,倒序需要添加参数 DESC, </p><p>分页运用 LIMIT 0,2;</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &#96;students&#96; SET &#96;nickname&#96;&#x3D;&#39;没有昵称&#39; WHERE &#96;sex&#96;&#x3D;&#39;女&#39;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM &#96;students&#96; where &#96;sex&#96;&#x3D;&#39;男&#39;;</span><br></pre></td></tr></table></figure><p>如果没有注明 where, 则会清空该表.</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 进阶模块</title>
      <link href="/2018/03/13/Nginx%20%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/03/13/Nginx%20%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>简介  </p><a id="more"></a>  <p>##静态资源配置</p><p>配置语法- sendfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: sendfile on | off;</span><br><span class="line">Default: sendfile off;</span><br><span class="line">Context: server,location,if in location</span><br></pre></td></tr></table></figure><p>配置语法- tcp-nopush</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: tcp_nopush on | off</span><br><span class="line">Default: tcp_push off;</span><br><span class="line">Context: http,server,location</span><br><span class="line"><span class="meta">#</span><span class="bash">在 sendfile 开启的情况下, 提高网络包的传递效率</span></span><br></pre></td></tr></table></figure><p>不着急推送,而是将多个 tcp 打包进行集中发送,以提升效率.适合大文件</p><p>配置语法- tcp-nodelay</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax: tcp_nodelay on | off</span><br><span class="line">Default: tcp_nodelay on;</span><br><span class="line">Context: http,server,location</span><br><span class="line"><span class="meta">#</span><span class="bash">在 keepalive 连接下,提高网络包的传递实时性</span></span><br></pre></td></tr></table></figure><p>配置语法-压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">压缩等级设置</span></span><br><span class="line">Syntax: gzip_comp_level level;</span><br><span class="line">Default: gzip_comp_level 1;</span><br><span class="line">Context: http,server,location</span><br></pre></td></tr></table></figure><p>扩展 Nginx 压缩模块</p><p><strong><code>http_gzip_static_module</code></strong>-预读 gzip 功能. </p><p><strong><code>http_gunzip_module</code></strong>-应用支持 gunzip 的压缩功能. (很少用到)</p><p>gzip 对文本的压缩很好,对图片的压缩一般.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p>HTTP 协议定义的缓存机制(如 Expires,Cache-control等)</p><p>校验过期机制</p><table><thead><tr><th>校验是否过期</th><th>Expires(http1.0),Cache-Control(http1.1) (max-age定义一个周期)</th></tr></thead><tbody><tr><td>如果 max-age 显示已经过期,则会检查后面两个校验</td><td></td></tr><tr><td>协议中 Etag头信息校验</td><td>Etag(保存一个字符串,来识别缓存,类似”别名”)</td></tr><tr><td>Last-Modified 头信息校验</td><td>Last-Modified(保存一个时间,精确到秒,如果两个时间不一致,则服务器会传递一份新的)</td></tr></tbody></table><p>Max-age&lt;=0时,就要求每次请求都会要求服务器检查是否过期.即使服务器端设置了 max-age, 但是浏览器为了实时更新,会将 request里 max-age 设置为0.</p><p><img src="http://ojho2g8px.bkt.clouddn.com/WX20180312-121814@2x.png" alt=""></p><p>静态资源配置场景设置</p><p>配置语法-expires</p><p>location / {</p><p>expires  24h;</p><p>}</p><h2 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h2><p>为什么浏览器禁止跨域访问?</p><p>不安全,容易出现 CSRF 攻击.</p><p>nginx 怎么做?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax: add_header name value [always];</span><br><span class="line">Default: - </span><br><span class="line">Context: http,server,location,if in location</span><br></pre></td></tr></table></figure><p>如果服务器允许跨域访问,则浏览器不会禁止. 通过检查Access-Control-Allow-Origin 头来确定是否允许.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(htm|html)$ &#123;</span><br><span class="line">    add_header Access-Control-Allow-Origin http://www.qq.com;</span><br><span class="line">    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将 域名替换成*,则会对 CSRF 攻击完全开放.</p><p>##防盗链</p><p>简单防盗链实现.</p><p>防盗链设置思路.</p><p>首要方式:区别哪些请求是非正常的用户请求</p><p>基于 http_refer 防盗链配置模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> valid_referers表示允许哪些referer信息访问 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">none表示允许没有带referer的信息过来    </span></span><br><span class="line"><span class="meta">#</span><span class="bash">blocked表示</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ip 只允许这个ip的referer过来访问.</span></span><br><span class="line">valid_referers none blocked ip ;</span><br><span class="line"><span class="meta">if($</span><span class="bash">invalid_referer)&#123;</span></span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>‘referer’</strong>是告诉服务器这个请求是从哪个页面链接过来的.</p><p>如果直接访问页面,则在 access.log 里面为 “-“.</p><p>进阶解决方案:</p><p>后期补充</p><h2 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h2><p>正向代理</p><blockquote><p>客户端—代理—|— 服务端</p></blockquote><p>反向代理</p><blockquote><p>客户端—|—代理—服务端</p></blockquote><p>区别在于代理的对象不一样.</p><p>正向代理代理的对象是客户端.</p><p>反向代理代理的对象是服务端.</p><h4 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax: proxy_pass URL;</span><br><span class="line">Default: -</span><br><span class="line">Context: location,if in location,limit_except</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">http://ip:80/url/</span></span><br></pre></td></tr></table></figure><p>服务器 A (10.211.55.15)  服务器 B(10.211.55.16)</p><p>服务器A,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    if($http_x_forwarded_for !~*"^10\.211\.55\.16")&#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置后,所有不是来自服务器 B 的访问,都会被返回403.</p><p>服务器 B,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line">    proxy_pass $http_host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 uri 和 url 是不同的.</p><p>uri 统一资源标志符, url 统一资源定位符.</p><p>一个用于解析,一个用于直接传递路径.</p><p>其他语法配置</p><p><strong><code>proxy_buffering</code></strong>缓冲区</p><p><strong><code>proxy_redirect</code></strong>跳转重定向</p><p><strong><code>proxy_set_header</code></strong> 头信息 ,扩展 proxy_hide_header,proxy_set_body</p><p><strong><code>proxy_connect_timeout</code></strong>  超时 ,扩展 proxy_read_timeout,proxy_send_timeout</p><h3 id="proxy-常用配置"><a href="#proxy-常用配置" class="headerlink" title="proxy 常用配置"></a>proxy 常用配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">proxy_redirect default;</span><br><span class="line"></span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">proxy_connect_timeout 30;</span><br><span class="line">proxy_send_timeout 60;</span><br><span class="line">proxy_read_timeout 60;</span><br><span class="line"></span><br><span class="line">proxy_buffer_size 32k;</span><br><span class="line">proxy_buffering on;</span><br><span class="line">proxy_buffers 4 128k;</span><br><span class="line">proxy_busy_buffers_size 256k;</span><br><span class="line">proxy_max_temp_file_size 256k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个 proxy 方案,则可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    include proxy_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把配置放在文件里.</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基础&amp;常用模块</title>
      <link href="/2018/03/13/Python/Nginx%E5%9F%BA%E7%A1%80&amp;%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/03/13/Python/Nginx%E5%9F%BA%E7%A1%80&amp;%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>简介  </p><a id="more"></a>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nginx -v </span><br><span class="line"><span class="meta">#</span><span class="bash">查看 nginx 编译参数</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="meta">#</span><span class="bash">检查 nginx 配置文件语法是否正确</span></span><br><span class="line">nginx -t -c /etc/nginx/nginx.conf  </span><br><span class="line"><span class="meta">#</span><span class="bash">重新载入配置文件</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="Nginx-的中间件架构"><a href="#Nginx-的中间件架构" class="headerlink" title="Nginx 的中间件架构"></a>Nginx 的中间件架构</h2><p>Nginx 是一个开源且高性能可靠的 HTTP 中间件,代理服务.</p><p>##为什么选择 Nginx?</p><p>原因1,IO 多路复用 epoll.</p><blockquote><p>IO 复用就是将多个 IO 流使用一个 socket 来传递.</p></blockquote><p>原因2,轻量级</p><p>原因3,CPU 亲和(affinity)</p><p><code>CPU 亲和是一种把 CPU 核心和 Nginx 工作进程绑定方式,把每个 worker 进程固定在一个 CPU 上执行,减少切换 CPU 的 cache miss, 获得更好的性能.</code></p><p>原因4,sendfile</p><h2 id="Nginx-目录讲解"><a href="#Nginx-目录讲解" class="headerlink" title="Nginx 目录讲解"></a>Nginx 目录讲解</h2><table><thead><tr><th>路径</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>/etc/logrotate.d/nginx</td><td>配置文件</td><td>Nginx 日志轮转,用于 logrotate 服务的日志切割</td></tr><tr><td></td><td></td><td></td></tr><tr><td>/ etc/nginx</td><td>目录,配置文件</td><td>Nginx 主配置文件</td></tr><tr><td>/ etc/nginx/nginx.conf</td><td></td><td>主要配置文件</td></tr><tr><td>/etc/nginx/nginx/conf.d</td><td></td><td></td></tr><tr><td>/etc/nginx/conf.d/default.conf</td><td></td><td>默认配置文件</td></tr><tr><td></td><td></td><td></td></tr><tr><td>/etc/nginx/fastcgi_params</td><td>配置文件</td><td>fastcgi 配置</td></tr><tr><td>/etc/nginx/uwsgi_params</td><td></td><td>param(参数)</td></tr><tr><td>/etc/nginx/scgi_params</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>/etc/nginx/koi-utf</td><td>配置文件</td><td>编码转换映射转化文件</td></tr><tr><td>/etc/nginx/koi-win</td><td></td><td></td></tr><tr><td>/etc/nginx/win-utf</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>/etc/nginx/mime.types</td><td>配置文件</td><td>设置 http 协议的 Content-Type 与扩展名对应关系</td></tr><tr><td></td><td></td><td></td></tr><tr><td>/usr/lib/systemd/system/nginx-debug.service</td><td>配置文件</td><td>centos7中,用于配置出系统守护进程管理器管理方式</td></tr><tr><td>/usr/lib/systemd/system/nginx.service</td><td></td><td></td></tr><tr><td>/etc/sysconfig/nginx</td><td></td><td></td></tr><tr><td>/etc/sysconfig/nginx-debug</td><td></td><td></td></tr></tbody></table><p>看/ etc/nginx/conf.d</p><p>看/ etc/nginx/nginx.conf</p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>request-包括请求行,请求头部,请求数据</p><p>response-包括状态行,消息报头,响应正文</p><p>Curl -CommandLine Uniform Resource Locator</p><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具.</p><p>通过编辑配置文件,可以更改 error.log和 access.log 的记录,  具体哪些参数可以添加,可以参考 Nginx.org 上面的文档.</p><p>###Nginx 变量</p><p>1.http请求变量</p><p>2.Nginx 内置变量</p><p>3.自定义变量</p><h2 id="Nginx-模块讲解"><a href="#Nginx-模块讲解" class="headerlink" title="Nginx 模块讲解"></a>Nginx 模块讲解</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h4 id="stub-status-moule模块"><a href="#stub-status-moule模块" class="headerlink" title="_stub_status_moule模块,"></a><strong><code>_stub_status_moule</code></strong>模块,</h4><p>显示 Nginx 当前处理链接的状态,用于监控 Nginx 当前连接的信息</p><p>需要在<code>/etc/nginx/conf.d/default.conf</code>添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /mystatus &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="with-http-random-index-module"><a href="#with-http-random-index-module" class="headerlink" title="--with-http_random_index_module"></a><strong><code>--with-http_random_index_module</code></strong></h4><h4 id="gx-http-sub-module"><a href="#gx-http-sub-module" class="headerlink" title="gx_http_sub_module"></a><strong><code>gx_http_sub_module</code></strong></h4><p><code>sub_filter</code>,<code>sub_filter_last_modified</code>,<code>sub_filter_once</code>,<code>sub_filter_types</code>替换 HTTP 页面 </p><h4 id="limit-conn-module连接频率限制"><a href="#limit-conn-module连接频率限制" class="headerlink" title="limit_conn_module连接频率限制"></a><strong><code>limit_conn_module</code></strong>连接频率限制</h4><h4 id="limit-req-module请求频率限制"><a href="#limit-req-module请求频率限制" class="headerlink" title="limit_req_module请求频率限制"></a><strong><code>limit_req_module</code></strong>请求频率限制</h4><p>HTTP协议的连接与请求</p><table><thead><tr><th>HTTP 协议版本</th><th>连接关系</th></tr></thead><tbody><tr><td>HTTP1.0</td><td>TCP 不能复用</td></tr><tr><td>HTTP1.1</td><td>顺序性 TCP 复用</td></tr><tr><td>HTTP2.0</td><td>多路复用 TCP 复用</td></tr></tbody></table><p>HTTP 请求建立在一次 TCP 连接基础上</p><p>一次 TCP 连接至少产生一次 HTTP 请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ab -n 50 -c 20 http:&#x2F;&#x2F;www.qq.com</span><br><span class="line"></span><br><span class="line">-n 表示请求数为50 , -c 20是同时并发请求数</span><br><span class="line">ab 是 Apache 自带的压力测试工具,是一个很实用的测试工具.</span><br></pre></td></tr></table></figure><p>###Nginx 访问控制</p><p><strong><code>http_access_module</code></strong>基于 ip 的访问控制.</p><p>如果要写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    allow all;</span><br><span class="line">    deny 10.211.55.2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#需要注意 allow all的位置, 如果 allow all 在前面,则后面所有的 deny 都会无效.</span></span></span><br></pre></td></tr></table></figure><p><code>access_module</code>的局限性:因为存在7lay LSB和 CDN 等,所以 remote_addr 不一定是需要进行限制的 ip 地址. 无法保证 remote_addr 的准确性</p><p><strong>进阶方法</strong></p><p>方案1.采用别的 HTTP 头信息控制访问, <strong><code>http_x_forwarded_for</code></strong></p><p><img src="http://ojho2g8px.bkt.clouddn.com/WX20180312-111918@2x.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http_x_forwarded_for = Client IP, Proxy(1)IP,Proxy(2)IP...</span><br></pre></td></tr></table></figure><p>但是 x_forwarded_for 只是一个协议,并没有强制要求对方遵守,故是可以被篡改的,安全性并不高.</p><p>方案2.结合 geo 模块</p><p>方案3.通过 HTTP 自定义变量传递</p><h4 id="http-auth-basic-module基于用户的信任登录"><a href="#http-auth-basic-module基于用户的信任登录" class="headerlink" title="http_auth_basic_module基于用户的信任登录"></a><strong><code>http_auth_basic_module</code></strong>基于用户的信任登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    auth_basic &#39;this is a test&#39;;</span><br><span class="line">    auth_basic_user_file &#x2F;path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 htpasswd来进行加密.  该工具集成在 httpd-tools 里面.</p><p>局限性</p><p>1.用户信息依赖文件方式</p><p>2.操作机械,效率低下</p><p>解决方案:</p><p>1.Nginx 结合 LUA 实现高效验证</p><p>2.Nginx 和 LDAP 大同,利用 Nginx-auth-ldap 模块.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表推导式</title>
      <link href="/2018/03/09/Python/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
      <url>/2018/03/09/Python/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Python 推导式</p><a id="more"></a>  <p>在数学中有一个集合推导式</p><h2 id="用-map-函数"><a href="#用-map-函数" class="headerlink" title="用 map 函数"></a>用 map 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r = list(map(<span class="keyword">lambda</span> x : x*x*x,a))</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><p>##用列表推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">b = [i**<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p><strong>可以看到,列表推导式更为简洁.</strong></p><h2 id="如果有条件判断的话"><a href="#如果有条件判断的话" class="headerlink" title="如果有条件判断的话"></a>如果有条件判断的话</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure><p>如果只选择大于等于5的部分<br>​```<br>a = [1,2,3,4,5,6,7,8]<br>b = [i**3 for i in a if i &gt;=5]<br>print(b)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果用 map 函数的话,还需要结合 filter 来过滤.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__tips:__ _set ,字典和元组也可以_</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">students &#x3D; &#123;</span><br><span class="line">    &#39;m&#39;:18,</span><br><span class="line">    &#39;y&#39;:20,</span><br><span class="line">    &#39;t&#39;:15</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b &#x3D; [key for key,value in students.items()]</span><br><span class="line">print(b)</span><br><span class="line">b &#x3D; &#123;value:key for key,value in students.items()&#125;</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 进阶-数据结构与算法进阶训练 </title>
      <link href="/2018/03/09/Python/Python%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83/"/>
      <url>/2018/03/09/Python/Python%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>训练数据筛选,排序,查找,统计,记录等方面的处理能力.</p><a id="more"></a> <h2 id="2-1如何在列表-字典-集合中根据条件筛选数据"><a href="#2-1如何在列表-字典-集合中根据条件筛选数据" class="headerlink" title="2.1如何在列表,字典,集合中根据条件筛选数据"></a>2.1如何在列表,字典,集合中根据条件筛选数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">-6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">-2</span>,<span class="number">-4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#用过滤器</span></span><br><span class="line">b = list(filter(<span class="keyword">lambda</span> x:x&gt;<span class="number">0</span>,a))</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用列表推导式</span></span><br><span class="line">c = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i&gt;<span class="number">0</span> ]</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典推导式</span></span><br><span class="line">d = &#123;x:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)&#125;</span><br><span class="line">print(d)</span><br><span class="line">e = &#123; k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items() <span class="keyword">if</span> v&gt;<span class="number">90</span>&#125;</span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#集合推导式</span></span><br><span class="line">f = set(a)</span><br><span class="line">g = (x <span class="keyword">for</span> x <span class="keyword">in</span> f <span class="keyword">if</span> a%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">print(g)</span><br></pre></td></tr></table></figure><p>用函数,或者用推导式来根据条件进行筛选.</p><p>推导式耗费的时间更少.</p><h2 id="2-2如何为元组中的每个元素命名-提高程序可读性"><a href="#2-2如何为元组中的每个元素命名-提高程序可读性" class="headerlink" title="2.2如何为元组中的每个元素命名,提高程序可读性"></a>2.2如何为元组中的每个元素命名,提高程序可读性</h2><blockquote><p>实际案例,在学生信息系统中数据为固定格式:(名字,年龄,性别,邮箱…)</p><p>为了减少存储开销,对每个学生信息用元组表示:</p><p>(‘Jim’,16,’male’,’dwad@qq.com’)</p><p>在访问时,就不可避免的需要使用 <code>student[2]</code>这种索引来访问,降低了程序的可读性.</p><hr></blockquote><p><strong>方案1</strong></p><p>定义类似于其他语言的枚举类型,即定义一系列数值常量.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME = <span class="number">1</span></span><br><span class="line">AGE = <span class="number">2</span></span><br><span class="line">student[NAME]</span><br></pre></td></tr></table></figure><p><strong>方案2</strong></p><p>使用标准库中 collections.nametuple 来给 tuple 内个位置命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Student = namedtuple(<span class="string">'Student'</span>,[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>,<span class="string">'email'</span>])</span><br><span class="line">s = Student(<span class="string">'Jim'</span>,<span class="number">16</span>,<span class="string">'male'</span>,<span class="string">'dwad@qe.com'</span>)</span><br><span class="line">print(s)</span><br><span class="line">print(s.name,s.email)</span><br><span class="line"><span class="comment">#s是 tuple 的子类</span></span><br><span class="line">print(isinstance(s,tuple))</span><br></pre></td></tr></table></figure><p>开销仅仅比 tuple 大了一点,但可以精确定位元组内元素位置.</p><h2 id="2-3如何统计序列中元素的出现频度"><a href="#2-3如何统计序列中元素的出现频度" class="headerlink" title="2.3如何统计序列中元素的出现频度"></a>2.3如何统计序列中元素的出现频度</h2><blockquote><p>1.某随机序列[12,5,6,4,6,5,5,7….]中,找到出现次数最高的3个元素,它们出现次数是多少?</p><p>2.对某英文文章的单词,进行词频统计,找到出现次数最高的10个单词,它们出现次数是多少?</p><hr></blockquote><p>使用 collections.Counter .</p><p>将序列传入 Counter 的构造器,得到 Counter 对象是<code>元素频度的字典</code>.</p><p>Counter.most_common(n)方法可以得到频度最高的 n 个元素的<code>列表</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">data = [randint(<span class="number">1</span>,<span class="number">20</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>)]</span><br><span class="line">print(data)</span><br><span class="line">c = Counter(data)</span><br><span class="line">print(c)</span><br><span class="line">print(c.most_common(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="2-4如何根据字典中值得大小-对字典中的项排序"><a href="#2-4如何根据字典中值得大小-对字典中的项排序" class="headerlink" title="2.4如何根据字典中值得大小,对字典中的项排序"></a>2.4如何根据字典中值得大小,对字典中的项排序</h2><blockquote><p>某班成绩以字典形式存储:</p><p>{‘Li’:79,’Da’:31….}</p><p>根据成绩高低,计算学生排名.</p><hr></blockquote><p>使用内置函数 sorted.</p><p><strong>1.利用 zip 将字典数据转化成元组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">d = &#123;x:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'zuadw'</span>&#125;</span><br><span class="line">print(d)</span><br><span class="line">print(d.keys())</span><br><span class="line">print(d.values())</span><br><span class="line">print(sorted(zip(d.values(),d.keys())))</span><br></pre></td></tr></table></figure><p><em>在 Python2中还有 dict.itervalues 方法,但是在 Python3中已经删除了.</em></p><p>zip 的作用是将两个序列,通过一定顺序组合成一个元组.</p><p>之后就可以使用 sorted()函数来对其进行排序.</p><p><strong>2.传递 sorted 函数的 key 参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(d.items())</span><br><span class="line">print(sorted(d.items(),key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>这里利用了3个知识点.</p><p>利用 d.items 的结构, 利用 sorted 的 key 参数来进行排序,利用匿名函数的特性.</p><h2 id="2-5如何快速找到多个字典中的公共键-key"><a href="#2-5如何快速找到多个字典中的公共键-key" class="headerlink" title="2.5如何快速找到多个字典中的公共键(key)?"></a>2.5如何快速找到多个字典中的公共键(key)?</h2><blockquote><p>每轮球员进球统计:</p><p>第一轮:{‘苏亚雷斯’:1,’梅西’:2,’本泽马’:1,’C 罗’:3…}</p><p>第二轮:{‘苏亚雷斯’:2,’C 罗’:1,’格里兹曼’:2,’贝尔’:1….}</p><p>….</p><p>统计前 N 轮,每场比赛都有进球的球员.</p><hr></blockquote><p>解决方法:</p><p>利用集合(set)的交集操作</p><p>Step1:使用字典的 viewkeys()方法,得到一个字典 keys 的集合.</p><p>Step2:使用 map 函数,得到所有字典的 keys 的集合.</p><p>Step3:使用 reduce 函数,取得所有字典的 keys 的集合的交集.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint,sample</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">s1 = &#123;x:randint(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> sample(<span class="string">'abcdefg'</span>,randint(<span class="number">3</span>,<span class="number">6</span>))&#125;</span><br><span class="line">s2 = &#123;x:randint(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> sample(<span class="string">'abcdefg'</span>,randint(<span class="number">3</span>,<span class="number">6</span>))&#125;</span><br><span class="line">s3 = &#123;x:randint(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> sample(<span class="string">'abcdefg'</span>,randint(<span class="number">3</span>,<span class="number">6</span>))&#125;</span><br><span class="line">print(s1)</span><br><span class="line">print(s2)</span><br><span class="line">print(s3)</span><br><span class="line">print(reduce(<span class="keyword">lambda</span> a,b:a&amp;b, map(dict.keys,[s1,s2,s3])))</span><br></pre></td></tr></table></figure><h2 id="2-6如何让字典保持有序"><a href="#2-6如何让字典保持有序" class="headerlink" title="2.6如何让字典保持有序"></a>2.6如何让字典保持有序</h2><blockquote><p>选手完成题目后,吧该选手解题用时记录到字典中,以便赛后按选手名查询成绩,</p><p>{‘Li’:(2,3)….}</p><p>比赛结束以后,需按排名顺序依次打印选手成绩,如何实现?</p><hr></blockquote><p>使用 collections.OrderdDict,即有序字典.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">d = OrderedDict()</span><br><span class="line">d[<span class="string">'jim'</span>]=(<span class="number">1</span>,<span class="number">35</span>)</span><br><span class="line">d[<span class="string">'leo'</span>]=(<span class="number">2</span>,<span class="number">34</span>)</span><br><span class="line">d[<span class="string">'dw'</span>]=(<span class="number">2</span>,<span class="number">53</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>不过直接使用 <code>d={}</code>来创建,发现顺序也是保持一致的.</p><p>这点需要进一步探究.</p><h2 id="2-7如何实现用户的历史记录功能-最多-n-条"><a href="#2-7如何实现用户的历史记录功能-最多-n-条" class="headerlink" title="2.7如何实现用户的历史记录功能(最多 n 条)?"></a>2.7如何实现用户的历史记录功能(最多 n 条)?</h2><blockquote><p>制作一个简单的猜数字小游戏,添加历史记录功能,显示用户最近猜过的数字,如何实现?</p><hr></blockquote><p>解决方案:</p><p>使用容量为 n 的队列存储历史记录.</p><p>使用标准库 collection 中的 deque, 它是一个双向队列.(先进先出)</p><p>程序退出前,可以使用 pickle 将队列对象存入文件,再次运行程序时将其导入.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">N = randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> k == N:</span><br><span class="line">        print(<span class="string">'yes'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> k &lt; N:</span><br><span class="line">        print(<span class="string">'less'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'more'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = input(<span class="string">'input a num:'</span>)</span><br><span class="line">    <span class="keyword">if</span> guess(int(line)):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>上面的代码实现了小游戏的功能,需要再进一步添加历史记录功能.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">history = deque([],<span class="number">5</span>)</span><br><span class="line">N = randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> k == N:</span><br><span class="line">        print(<span class="string">'yes'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> k &lt; N:</span><br><span class="line">        print(<span class="string">'less'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'more'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = input(<span class="string">'input a num:'</span>)</span><br><span class="line">    print(type(line))</span><br><span class="line">    <span class="keyword">if</span> line.isdigit():</span><br><span class="line">        k = int(line)</span><br><span class="line">        history.append(k)</span><br><span class="line">        print(history)</span><br><span class="line">        <span class="keyword">if</span> guess(k):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> line == <span class="string">'h'</span>:</span><br><span class="line">        print(list(history))</span><br></pre></td></tr></table></figure><p>需要注意的是,</p><p>1.<code>str.isdigit()</code>用来判断字符串是否为数字.</p><p>2.isinstance方法可以用来判断是否是统一类型.</p><p>3.raw_input 和 input,在 python3中已经统一成 input 了.</p><p>4.注意版本不同时 input 的返回类型不同.</p><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器</title>
      <link href="/2018/03/08/Python/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2018/03/08/Python/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>对装饰器的理解</p><a id="more"></a><h2 id="装饰器实现的例子"><a href="#装饰器实现的例子" class="headerlink" title="装饰器实现的例子"></a>装饰器实现的例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is a func'</span>)</span><br></pre></td></tr></table></figure><p>使用装饰器的原因 <strong>对修改是封闭的,对扩展是开放的.</strong></p><p><em>装饰器将核心业务代码和其他”装饰性”的代码进行分离,这样不仅提高了代码复用,而且也方便了代码管理.</em></p><p>@就像是一个装饰一样,为函数增加了新的功能.</p><h3 id="带有一个参数的装饰器"><a href="#带有一个参数的装饰器" class="headerlink" title="带有一个参数的装饰器"></a>带有一个参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func_name)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">'This is a func'</span>+func_name)</span><br></pre></td></tr></table></figure><h3 id="不同数量参数的装饰器"><a href="#不同数量参数的装饰器" class="headerlink" title="不同数量参数的装饰器"></a>不同数量参数的装饰器</h3><p>装饰器应具有通用性,所以不应被参数数量所限制,所以这里可以使用可变参数 *args.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(*args)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">'This is a func'</span>_func_name)</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(func_name1,func_name2)</span>:</span></span><br><span class="line">    print(<span class="string">'This is a func'</span>+func_name1)</span><br><span class="line">    print(<span class="string">'This is a func'</span>+func_name2)</span><br><span class="line">f1(<span class="string">'func'</span>)</span><br><span class="line">f2(<span class="string">'func1'</span>,<span class="string">'func2'</span>)</span><br></pre></td></tr></table></figure><h3 id="加入了关键字参数时"><a href="#加入了关键字参数时" class="headerlink" title="加入了关键字参数时"></a>加入了关键字参数时</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(*args)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">'This is a func'</span>_func_name)</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(func_name1,func_name2)</span>:</span></span><br><span class="line">    print(<span class="string">'This is a func'</span>+func_name1)</span><br><span class="line">    print(<span class="string">'This is a func'</span>+func_name2)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(func_name1,func_name2,**kw)</span>:</span></span><br><span class="line">    print(<span class="string">'This is a func'</span>+func_name1)</span><br><span class="line">    print(<span class="string">'This is a func'</span>+func_name2)</span><br><span class="line">    print(kw)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">f1(<span class="string">'func'</span>)</span><br><span class="line">f2(<span class="string">'func1'</span>,<span class="string">'func2'</span>)</span><br><span class="line">f2(<span class="string">'func1'</span>,<span class="string">'func2'</span>,a = <span class="number">1</span>, b = <span class="number">2</span>,c = <span class="string">'123'</span>)</span><br></pre></td></tr></table></figure><h3 id="技巧总结"><a href="#技巧总结" class="headerlink" title="技巧总结"></a>技巧总结</h3><p>通过* args(可变参数),**kw(关键字参数)来提升装饰器的通用性.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>None,布尔,空</title>
      <link href="/2018/03/07/Python/None,%E5%B8%83%E5%B0%94,%E7%A9%BA/"/>
      <url>/2018/03/07/Python/None,%E5%B8%83%E5%B0%94,%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<p>None,布尔,空的对应关系,还有对象和布尔的对应关系</p><a id="more"></a><h1 id="None-的定义"><a href="#None-的定义" class="headerlink" title="None 的定义"></a>None 的定义</h1><p>空就是空, 不等于空字符串,不等于空列表,不等于0,不等于 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="string">''</span></span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line">print(a==<span class="literal">None</span>)</span><br><span class="line">print(b==<span class="literal">None</span>)</span><br><span class="line">print(c==<span class="literal">None</span>)</span><br><span class="line">print(a <span class="keyword">is</span> <span class="literal">None</span>)</span><br><span class="line">print(type(<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">NoneType</span>'&gt;</span></span><br></pre></td></tr></table></figure><p><code>__None 本身是一个对象,是一个类型__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">a = fun()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br><span class="line">    </span><br><span class="line">=&gt;</span><br><span class="line">S</span><br><span class="line">S</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">a =[]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br><span class="line">    </span><br><span class="line">=&gt;</span><br><span class="line">S</span><br><span class="line">F</span><br></pre></td></tr></table></figure><p>体会上面两个例子.</p><p>可以看到 None 是一种类型,也是一个对象.</p><p><code>not None</code>=<code>True</code>,None是一个对象.</p><p><code>a is None</code> ,None是一个类型</p><h2 id="用-None-作控制字符"><a href="#用-None-作控制字符" class="headerlink" title="用 None 作控制字符"></a>用 None 作控制字符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>这样,在 a = None,a = ‘’,a = [],a = False 时都可以起到控制作用<br>​```</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># None和布尔类型的区别</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">print(type(None))</span><br><span class="line">print(type(False))</span><br><span class="line">print(type(True))</span><br><span class="line"></span><br><span class="line">&#x3D;&gt;</span><br><span class="line">&lt;class &#39;NoneType&#39;&gt;</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br></pre></td></tr></table></figure><p>None表示<code>不存在</code>, False 和 True 表示<code>真假</code></p><h2 id="在-if控制中"><a href="#在-if控制中" class="headerlink" title="在 if控制中"></a>在 if控制中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>虽然得到的结果是相同的,但并不代表他们的意义是相同的.</p><h2 id="True-和-False-对应关系"><a href="#True-和-False-对应关系" class="headerlink" title="True 和 False 对应关系"></a>True 和 False 对应关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span></span><br><span class="line">[]</span><br><span class="line"><span class="literal">None</span>   对应 Fasle</span><br></pre></td></tr></table></figure><h2 id="对象和布尔的关系"><a href="#对象和布尔的关系" class="headerlink" title="对象和布尔的关系"></a>对象和布尔的关系</h2><p>但是对于自定义对象则可能会出现其他情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line">print(bool(<span class="literal">None</span>))</span><br><span class="line">print(bool([]))</span><br><span class="line">print(bool(test))</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line">print(bool(<span class="literal">None</span>))</span><br><span class="line">print(bool([]))</span><br><span class="line">print(bool(test))</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong><em>几乎所有对象中,<code>对象存在</code>对应着<code>True</code>, 但是对于自定义对象来说,则不一定.</em></strong></p><p>这和自定义对象中两个内置函数相关.</p><p><code>__len__</code>和<code>__bool__</code></p><p>__len__返回0:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#def __bool__(self):</span></span><br><span class="line">    <span class="comment">#    print('bool called')</span></span><br><span class="line">    <span class="comment">#    return False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'len called'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">print(len(Test()))</span><br><span class="line">print(bool(Test()))</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line">len called</span><br><span class="line"><span class="number">0</span></span><br><span class="line">len called</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>__len__返回非0:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#def __bool__(self):</span></span><br><span class="line">    <span class="comment">#    print('bool called')</span></span><br><span class="line">    <span class="comment">#    return False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'len called'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">print(len(Test()))</span><br><span class="line">print(bool(Test()))</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line">len called</span><br><span class="line"><span class="number">3</span></span><br><span class="line">len called</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><code>所以,对于对象来说, bool(对象)是通过对__ len__ 函数的&quot;返回值&quot;进行判断来确定 True 和 False 的.</code></p><p>当存在__bool__函数时,则由__bool__函数接管:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'bool called'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'len called'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">print(len(Test()))</span><br><span class="line">print(bool(Test()))</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line">len called</span><br><span class="line"><span class="number">0</span></span><br><span class="line">bool called</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>当存在<code>__bool__</code>函数时, bool(Test())并没有调用<code>__len__</code>,而是直接调用了<code>__bool__</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫问题, SSL 验证出错</title>
      <link href="/2018/03/07/Python/python%E7%88%AC%E8%99%AB%E9%97%AE%E9%A2%98,%20SSL%E9%AA%8C%E8%AF%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/03/07/Python/python%E7%88%AC%E8%99%AB%E9%97%AE%E9%A2%98,%20SSL%E9%AA%8C%E8%AF%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在使用 Python爬虫时,会遇到 urlopen 出错</p><a id="more"></a><p>#python爬虫问题, SSL验证问题</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>调试时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Python 升级到2.7.9以后映入到一个新特性,当使用 urllib.urlopen 打开一个 https 链接时,会验证一次 SSL 证书.</p><p>当目标网站使用的而是一个<strong>自签名</strong>的证书时,就会抛出一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.使用 ssl 创建未经验证的上下文,在 urlopen 中传入上下文参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line">context = ssl._create_unverified_context()</span><br><span class="line"><span class="keyword">print</span> urllib2.urlopen(<span class="string">"https://www.panda.tv/cate/lol"</span>, context=context).read()</span><br></pre></td></tr></table></figure><p>2.全局取消证书验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"> </span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> urllib2.urlopen(<span class="string">"https://www.panda.tv/cate/lol"</span>).read()</span><br></pre></td></tr></table></figure><p> 因为爬虫并不担心安全性,故直接使用第二种方案.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>youtube-dl 下载</title>
      <link href="/2017/06/16/Mac/title:%20youtube%E4%B8%8B%E8%BD%BD/"/>
      <url>/2017/06/16/Mac/title:%20youtube%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>youtube 上有很多不错的视频,奈何超清画质不能下载,所以琢磨了琢磨 youtube-dl, 用来下载 youtube 的视频.</p><p>据说也可以下载优酷,土豆之类的.</p><a id="more"></a><p>使用 youtube-dl 进行下载, youtube-dl 自动调用 FFmpeg 进行音频和视频的合并.</p><p>在 zsh 内部写了别名,</p><p>所以直接在终端中使用 youtube +要下载视频的 URL, 就能下载到 影片文件夹.</p><p>默认下载分辨率最高的资源.</p><p><img src="http://ojho2g8px.bkt.clouddn.com/2017-06-16-064954.jpg" alt="Jietu20170616-144832"></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>琥珀的猫粮选定</title>
      <link href="/2017/06/13/%E6%9D%82/title:%20%E7%90%A5%E7%8F%80%E7%9A%84%E7%8C%AB%E7%B2%AE%E9%80%89%E5%AE%9A/"/>
      <url>/2017/06/13/%E6%9D%82/title:%20%E7%90%A5%E7%8F%80%E7%9A%84%E7%8C%AB%E7%B2%AE%E9%80%89%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>小琥珀长大了,之前给他买的应急粮已经吃的差不多了,所以也该做做猫粮方面的而研究.</p><a id="more"></a><p>给琥珀选择食粮,找了很多资料.</p><p>首先得了解猫咪的身体需要:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">猫的营养要求非常特殊,不能只看原料成分选猫粮!</span><br><span class="line"></span><br><span class="line">猫自身不能合成的氨基酸:牛磺酸,精氨酸.</span><br><span class="line"></span><br><span class="line">猫自身不能合成:维生素 A, 维生素 B3,维生素 B6,维生素 D.</span><br><span class="line"></span><br><span class="line">还有 花生四烯酸.</span><br></pre></td></tr></table></figure><p>其次,要对猫粮原材料了解:</p><p>选猫粮的时候,要注意成分,肉粉没有肉好,另外注意防腐剂,</p><p>买的时候注意看前三种原材料.</p><p>前三种都是肉,已经具有好粮的潜质了.</p><p><strong>国内常见的品牌有:</strong> <font size=1>下面的营养表并不稳定,因为各大宠物粮制造公司不停地调整配方.</font></p><hr><p>渴望,传说中的”高富帅”猫粮, 没的说,有钱上.<br><em>营养:粗蛋白(最小值) 35％，粗脂肪(最小值) 20％，粗纤维（最大）3％</em></p><hr><p>GO!,加拿大的品牌,最近价格炒起来了, 性价比还是不错,各方面均为上品,还是蛮推荐的.<br><em>营养:粗蛋白(最小值) 46％，粗脂肪(最小值) 18％，粗纤维(最大）1.5％</em></p><hr><p>NOW 是传说中的”土豆饼干”,土豆味比较大,但吃起来并没有土豆味,配方很好,对猫猫的毛发和肠胃都很有帮助.<br><em>营养:粗蛋白(最小值) 31％，脂肪(最小值) 18％，纤维（最大）3.5％</em></p><hr><p>雪山幼猫粮,价格适合,口味不错,搭配平衡,总的来说是很好的中阶猫粮,而且有官方旗舰店,并不担心断粮和假粮,品质有保障.<strong>==暂定为琥珀的猫粮了==.</strong><br><em>营养:粗蛋白（最小值）34％，粗脂肪（最小值）17％，粗纤维（最大）3％</em></p><hr><p>素力高,推荐金装素力高,性价比不错,营养表和原材料表也很好看.<br><em>营养: 粗蛋白（最小值）40％，粗脂肪（最小值）18％，粗纤维（最大）3％</em></p><hr><p>安娜玛特,比较推荐的是他的红莓款,多种维生素的添加配上不错的营养表,但最近价格被炒起来了,性价比不高.<br><em>营养:粗蛋白（最小值）33％，粗脂肪（最小值）15％，粗纤维（最大）3％</em></p><hr><p>美士,据说口碑很好很好,但尝过的人都认为口味一般,中庸便宜是他的特点.<br><em>营养: 粗蛋白（最小值）36％，粗脂肪（最小值）19％，粗纤维（最大）4％</em></p><hr><p>牛油果,美国的品牌,还没接触过,据说增肥效果显著.<br><em>营养: 粗蛋白（最小值）32％，粗脂肪（最小值）20％，粗纤维（最大）3％</em></p><hr><p>EVO ,是玛氏的高阶品牌,有钱上,值得拥有.营养表和成分表都是很暴力的.<br><em>营养:粗蛋白(最小值) 50%, 粗脂肪(最小值) 22%, 粗纤维(最大值) 2.5%</em></p><hr><p>皇家猫粮油太大,另外有”诱食剂风波,”是玛氏的中阶品牌,不过在医院和猫舍的口碑还不错.如果预算不足,这个是很好的选择.</p><hr><p>伟嘉是玛氏的低阶品牌,也可以说是垃圾粮,不推荐食用.</p><hr><p>初步确定幼猫期吃专业幼猫粮,比如 雪山还有 Go!</p><p>长大了,可以考虑雪山,金装素力高和 Go!</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 猫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 猫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub也是有离线版的</title>
      <link href="/2017/06/09/%E6%9D%82/title:%20GitHub%E4%B9%9F%E6%98%AF%E6%9C%89%E7%A6%BB%E7%BA%BF%E7%89%88%E7%9A%84/"/>
      <url>/2017/06/09/%E6%9D%82/title:%20GitHub%E4%B9%9F%E6%98%AF%E6%9C%89%E7%A6%BB%E7%BA%BF%E7%89%88%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>因为伟大的 GFW 墙掉了 AWS, 所以GitHub的 Windows 版总是安装失败,所以去找了找是否有离线版安装包.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在线版安装:https:&#x2F;&#x2F;github-windows.s3.amazonaws.com&#x2F;GitHubSetup.exe</span><br><span class="line">离线版安装:https:&#x2F;&#x2F;github-windows.s3.amazonaws.com&#x2F;standalone&#x2F;GitHubDesktop.exe</span><br></pre></td></tr></table></figure><p>因为在安装过程中要保持联网,所以安装离线版安装包也有可能会失败,多试几次即可.</p>]]></content>
      
      
      <categories>
          
          <category> App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 的生成器</title>
      <link href="/2017/05/24/Python/title:%20%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2017/05/24/Python/title:%20%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>生成器可以动态的生成后续的元素,</p><p>是一种基于某种算法推算出来的, 因为在需要时才生成,故使用生成器可以节省大量的空间.</p><p>在 Python 中,这种一边循环一边计算的机制,称为生成器: generator.</p><a id="more"></a><h1 id="创建-generator"><a href="#创建-generator" class="headerlink" title="创建 generator"></a>创建 generator</h1><h2 id="改"><a href="#改" class="headerlink" title="[]改()"></a>[]改()</h2><p>只要将一个列表生成式的<code>[]</code>改成<code>()</code>,就创建了一个 generator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;L=[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">&gt;&gt;&gt;L</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">36</span>,<span class="number">49</span>,<span class="number">64</span>,<span class="number">81</span>]</span><br><span class="line">&gt;&gt;&gt;g=(x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">&gt;&gt;&gt;g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure><p>L 是 一个 list, g 是 一个 generator.</p><p>通过 next()函数,可以获得 generator 的下一个返回值.</p><p><strong>即,按照设定的算法生成了后续序列</strong></p><p>一般来说,是使用 for 循环来迭代 generator.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;g=(x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">       print(n)</span><br></pre></td></tr></table></figure><h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>有些函数也可以通过算法实现自增,</p><p>但是这种函数只是有了’<strong>自我生成算法</strong>‘,还缺少一个非常重要的标志’<strong>yield</strong>‘.</p><p>yield 取代 return, 为函数返回值.</p><p>如果一个函数定义包含关键字 yield, 那么这个函数就不再是一个普通的函数,而是一个 generator.</p><h2 id="yield-与-return-的区别"><a href="#yield-与-return-的区别" class="headerlink" title="yield 与 return 的区别"></a>yield 与 return 的区别</h2><p>当一个生成器函数调用 yield, 生成器函数的’<strong>状态</strong>‘会被<strong>冻结</strong>,所有的变量的值会被保留下来,下一行要执行的代码的位置也会被记录,知道再次调用 next().一旦 next() 再次被调用,生成器函数会从它上次离开的地方开始.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>generator 是用来产生一系列的值的.</li><li>yield 向 generator 函数返回结果</li><li>yield 唯一做的另一件事就是保存一个 generator 的状态</li><li>generator 是特殊类型的迭代器</li><li>可以通过 next()来获取 generator 的下一个值</li><li>可以通过隐私调用 next()来忽略某些值.</li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>杨辉三角问题</p><p><img src="http://ojho2g8px.bkt.clouddn.com/2017-05-24-091525.jpg" alt="Jietu20170524-164046"></p><ol><li><p>每个数等于它上方两数之和。</p></li><li><p>每行数字左右对称，由1开始逐渐变大</p><p>下面是我的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        L2=[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">yield</span> L2</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        L2=[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">yield</span> L2</span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">1</span>:</span><br><span class="line">        L=L2.copy()</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n<span class="number">-1</span>:</span><br><span class="line">            L2[i+<span class="number">1</span>]=L[i]+L[i+<span class="number">1</span>]</span><br><span class="line">            i=i+<span class="number">1</span></span><br><span class="line">        L2.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">yield</span> L2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> triangles():</span><br><span class="line">    print(t)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>在代码中,还有一个值得注意的地方.</p><p><code>L=L2</code>是软复制,仅仅是指针指向.</p><p>如果不希望两个 list 之间的变动相互干扰,就需要使用 <code>L.copy()</code>方法来实现硬复制.</p><p>另外,我的代码表现出很浓的 C 风格.</p><p>以下是看到的其他同学的实践方法,值得学习:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    L = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> L</span><br><span class="line">        L.append(<span class="number">0</span>)</span><br><span class="line">        L = [L[i - <span class="number">1</span>] + L[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(L))]</span><br></pre></td></tr></table></figure><p>还有另一种写法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    ret = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> ret</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ret)):</span><br><span class="line">            ret[i] = pre[i] + pre[i - <span class="number">1</span>]</span><br><span class="line">        ret.append(<span class="number">1</span>)</span><br><span class="line">        pre = ret[:]</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔很有趣</title>
      <link href="/2017/05/24/C/title:%20%E6%B1%89%E8%AF%BA%E5%A1%94%E5%BE%88%E6%9C%89%E8%B6%A3/"/>
      <url>/2017/05/24/C/title:%20%E6%B1%89%E8%AF%BA%E5%A1%94%E5%BE%88%E6%9C%89%E8%B6%A3/</url>
      
        <content type="html"><![CDATA[<p>汉诺塔的规则很有趣,</p><a id="more"></a><p>汉诺塔问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘.</p><p>不过先把 B站上的一个视频搬上来吧.</p><p><embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=7398130&page=1" pluginspage="//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></embed></p><p>简单来说,</p><p>只关注最底下的最大的盘子,一次递归.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数的一些问题</title>
      <link href="/2017/05/22/Python/title:%20Python%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2017/05/22/Python/title:%20Python%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>默认函数,可变函数等一些关于函数定义方面的问题.</p><a id="more"></a><h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><h2 id="默认参数定义"><a href="#默认参数定义" class="headerlink" title="默认参数定义"></a>默认参数定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先定义个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;power(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展这个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x,n)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * n</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;power(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">125</span></span><br></pre></td></tr></table></figure><p>但是这时候再调用第一个函数,则会报错.</p><p><img src="http://ojho2g8px.bkt.clouddn.com/2017-05-23-024529.jpg" alt="Jietu20170523-101648"></p><p>即,调用函数 power()缺少了一个位置参数 n.</p><p>这时候就需要使用<strong>默认参数</strong>了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x,n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * n</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要使用 n不等于2的情况,则需要明确传入 n 值.</span></span><br><span class="line"><span class="comment">#必选参数在前,默认参数在后,否则可能会报错.</span></span><br><span class="line"><span class="comment">#当函数有多个函数时,把变化比较大的参数放在前面,变化比较小的放后面.</span></span><br><span class="line"><span class="comment">#变化小的参数可以作为默认参数,这样可以降低调用的难度以及优化代码</span></span><br></pre></td></tr></table></figure><p>多个默认参数,有时按照顺序提供默认参数,有时可以不按顺序提供默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#顺序</span></span><br><span class="line">enroll(<span class="string">'Bo'</span>,<span class="string">'M'</span>,<span class="number">7</span>)</span><br><span class="line"><span class="comment">#不按照顺序</span></span><br><span class="line">enroll(<span class="string">'Ad'</span>,<span class="string">'M'</span>,city=<span class="string">'Tianjin'</span>)</span><br></pre></td></tr></table></figure><h2 id="默认参数坑"><a href="#默认参数坑" class="headerlink" title="默认参数坑"></a>默认参数坑</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    renturn L</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>函数定义的是在某个列后加入一个 ‘END’, 但是函数好像每次都<em>记住了</em>上次添加了’ END’后的 list.</p><p>原因如下:</p><p>Python函数在定义的时候,<strong>默认函数L</strong>的值就被确定了,因为 <strong>默认函数 L</strong> 也是一个变量,它指向对象[],每次调用该函数时,如果改变了 <strong>L</strong> 的内容,则下次调用时,默认参数的内容就发生了变化,不再是默认的定义.</p><p>故,需要特别注意!!</p><p><strong>默认参数必须指向不变对象!!</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可变对象:list,dict,ser</span><br><span class="line">不变对象: str,None,tuple</span><br></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>可变参数是指传入的参数个数是可变的.</p><h2 id="list法"><a href="#list法" class="headerlink" title="list法"></a>list法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以通过传入一个 list 作为函数的参数,从而实现参数个数可变.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numble)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="comment">#但是必须先填入一个 list 或 tuple</span></span><br><span class="line">&gt;&gt;&gt;calc([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><p>每次必须传入一个 list 或者 tuple, 太繁琐.</p><p>##加*</p><p>所以一般将函数的参数改为可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum  = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><p>在参数前加一个*号.</p><p>在内部流程中,参数 numbers 接收到的是一个<strong>tuple</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;calc(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果要传入一个 list 或 tuple, 则可以选择在 list 或 tuple 前加一个*号,把 list 或 tuple的元素变成可变参数传入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><h1 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h1><h2 id="关键字参数的设置"><a href="#关键字参数的设置" class="headerlink" title="关键字参数的设置"></a>关键字参数的设置</h2><p>可变参数允许传入任意<strong>个数</strong>参数,自动组装成一个 <strong>tuple</strong>.</p><p>关键字参数允许传入任意个数<strong>含参数名</strong>的参数,自动组装成一个 <strong>dict</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name,age,**kw)</span>:</span></span><br><span class="line">    print(name,age,kw)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;person(<span class="string">'Bo'</span>,<span class="number">5</span>,city=<span class="string">'Beijing'</span>)</span><br><span class="line">Bo,<span class="number">5</span>,other:&#123;<span class="string">'city'</span>:<span class="string">'Beijing'</span>&#125;</span><br></pre></td></tr></table></figure><p>在 person 函数里,我们能保证收到两个必须参数<em>name<em>和</em>age</em>,如果调用者需要提供更多信息,我们也可以收到这些信息,而且这些信息可以是任意的.</p><p>也可以先做一个 dict 来存储这些<strong>额外</strong>的信息,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;extra=&#123;<span class="string">'city'</span>:<span class="string">'Beijing'</span>,<span class="string">'job'</span>:<span class="string">'Engineer'</span>,<span class="string">'location'</span>:<span class="string">'changping'</span>&#125;</span><br><span class="line"><span class="comment">##可以对个别 key 值调用</span></span><br><span class="line">&gt;&gt;&gt;person(<span class="string">'Ja'</span>,<span class="number">24</span>,city=extra[<span class="string">'city'</span>])</span><br><span class="line"><span class="comment">##也可以一次性全部调用</span></span><br><span class="line">&gt;&gt;&gt;person(<span class="string">'Ja'</span>,<span class="number">23</span>,**extra)</span><br></pre></td></tr></table></figure><p><em>* extra 表示把 extra 这个 dict 的所有 key-value 用关键字参数传入到函数的 *\</em> kw 参数, kw 获得一个 dict, 这里并不是指针改变,而是拷贝,所以 kw 的后续改动并不会影响到函数外的 extra.</p><h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><h3 id="关键字参数检查"><a href="#关键字参数检查" class="headerlink" title="关键字参数检查"></a>关键字参数检查</h3><p>因为在传入时并没有规定参数的格式,所以传入的信息会比较杂乱,</p><p>有时希望<strong>检查</strong>某些参数是否输入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name,age,**kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'city'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'job'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'name:'</span>,name,<span class="string">'age:'</span>,age,<span class="string">'other:'</span>,kw)</span><br></pre></td></tr></table></figure><p>但传入的信息还是很杂乱,</p><h3 id="关键字参数限制"><a href="#关键字参数限制" class="headerlink" title="关键字参数限制"></a>关键字参数限制</h3><p>有时希望<strong>限制</strong>关键字参数的名字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name,age,*,city,job)</span>:</span></span><br><span class="line">    print(name,age,city,job)</span><br></pre></td></tr></table></figure><p><strong>*后面的参数都将被视为命名关键字参数.</strong></p><p><strong>如果有了一个可变参数,则可变参数后面的参数默认为命名关键字参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name,age,*args,city,job)</span>:</span></span><br><span class="line">    print(name,age,args,city,job)</span><br></pre></td></tr></table></figure><h3 id="关键字参数的一些问题"><a href="#关键字参数的一些问题" class="headerlink" title="关键字参数的一些问题"></a>关键字参数的一些问题</h3><ul><li><p>命名关键字参数必须传入参数名.</p><p>(因为它本质上是一个 dict, 与 key有关,与位置无关)</p></li><li><p>命名关键字可以设置缺省值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name,age,*,city=<span class="string">'Beijing'</span>,job)</span>:</span></span><br></pre></td></tr></table></figure><ul><li>注意区分位置参数和命名关键字参数,命名关键字参数实质是传入了一个 dict, 与位置无关.</li></ul><h1 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h1><h2 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h2><p>参数定义是一定要按照以下顺序</p><p><strong>必选参数,默认参数,可变参数,命名关键字参数,关键字参数</strong></p><p>比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a,b,c=<span class="number">0</span>,*args,**kw)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a,b,c=<span class="number">0</span>,*,d,**kw)</span>:</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">'ext'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="通过list-tuple-和-dict-传入"><a href="#通过list-tuple-和-dict-传入" class="headerlink" title="通过list,tuple 和 dict 传入"></a>通过list,tuple 和 dict 传入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">88</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> d = <span class="number">88</span> kw = &#123;<span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p><p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p><p>要注意定义可变参数和关键字参数的语法：</p><p><code>*args</code>是可变参数，args接收的是一个tuple；</p><p><code>**kw</code>是关键字参数，kw接收的是一个dict。</p><p>以及调用函数时如何传入可变参数和关键字参数的语法：</p><p>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</p><p>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{&#39;a&#39;: 1, &#39;b&#39;: 2})</code>。</p><p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p><p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p><p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 一些数据类型辨析</title>
      <link href="/2017/05/22/Python/title:%204%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/"/>
      <url>/2017/05/22/Python/title:%204%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p>list,tuple,dict,set 四种数据类型的定义和异同.</p><a id="more"></a><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>list 是一种有序的集合,可以随时添加和删除其中的元素.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#声明</span></span><br><span class="line">   classmates = [<span class="string">'Mi'</span>,<span class="string">'Bo'</span>,<span class="string">'Tr'</span>]</span><br><span class="line">   <span class="comment">#长度</span></span><br><span class="line">   len(classmates)</span><br><span class="line">   <span class="comment">#索引</span></span><br><span class="line">   classmates[<span class="number">0</span>]</span><br><span class="line">   <span class="comment">##倒数第一个索引</span></span><br><span class="line">   classmates[<span class="number">-1</span>]</span><br><span class="line">   <span class="comment">#追加</span></span><br><span class="line">   classmates.append(<span class="string">'Ad'</span>)</span><br><span class="line">   <span class="comment">#插入</span></span><br><span class="line">   classmates.insert(<span class="number">1</span>,<span class="string">'Ja'</span>)</span><br><span class="line">   <span class="comment">#删除末尾</span></span><br><span class="line">   classmates.pop()</span><br><span class="line">   <span class="comment">##删除指定位置</span></span><br><span class="line">   classmates.pop(<span class="number">1</span>)</span><br><span class="line">   <span class="comment">##list的元素可以为其他的数据结构</span></span><br><span class="line">   L=[<span class="string">'Ad'</span>,<span class="number">123</span>,[<span class="string">'ad'</span>,<span class="string">'ds'</span>]]</span><br></pre></td></tr></table></figure><h1 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h1><p>tuple是<strong>不可修改</strong>的 list.一旦初始化后,就不能修改.</p><p>因为<strong>不可修改</strong>,所以代码更为安全.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#声明</span></span><br><span class="line">classmates = (<span class="string">'Mi'</span>,<span class="string">'Bo'</span>,<span class="string">'Tr'</span>)</span><br><span class="line"><span class="comment">#因为括号()既可以表示 tuple, 又可以表示数学公式中的小括号.</span></span><br><span class="line"><span class="comment">#故 Python 规定.只有1个元素的tuple 定义时必须加一个**,**,来消除歧义</span></span><br><span class="line">t=(<span class="number">1</span>)</span><br><span class="line">t=(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>另外,因为特殊的结构,还存在一种”可变”的tuple.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#"可变"的 tuple</span></span><br><span class="line">t = (<span class="string">"Ad"</span>,<span class="number">123</span>,[<span class="string">'sad'</span>,<span class="string">'asda'</span>])</span><br></pre></td></tr></table></figure><p>因为, tuple 内含的 list 是可变的,而 tuple 本身的指向和结构并没有发生改变.</p><h1 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h1><p>dict即为 dictionary, 在其他语言中也称为 map. 使用键-值(key-value)存储,查找速度极快.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#声明</span></span><br><span class="line">d = &#123;<span class="string">'Mi'</span>:<span class="number">95</span>,<span class="string">'Bo'</span>:<span class="number">85</span>,<span class="string">'Tr'</span>:<span class="number">75</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="dict-和-list-查找速度对比"><a href="#dict-和-list-查找速度对比" class="headerlink" title="dict 和 list 查找速度对比"></a>dict 和 list 查找速度对比</h2><p>list:</p><p>把字典从第一页向后翻,直到查找到.</p><p>所以 list 中查找元素, list 越大,查找越慢</p><p>dict:</p><p>给定一个 key 值,来计算出 value 的存放位置.</p><p>比如” Mi”,dict 在内部进行计算出 Mi对应存放 value 的”页码”,即可直接取出 value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化后赋值</span></span><br><span class="line">d[<span class="string">'Mi'</span>]=<span class="number">97</span></span><br><span class="line"><span class="comment">#Key 不存在会报错</span></span><br><span class="line"><span class="comment">##判断 key 是否存在</span></span><br><span class="line"><span class="string">'Mi'</span><span class="keyword">in</span> d</span><br><span class="line"><span class="comment">##通过 get 方法,如果 key 不存在,返回指定 value</span></span><br><span class="line">d.get(<span class="string">'Mi'</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#删除一个 key</span></span><br><span class="line">d.pop(<span class="string">'Bo'</span>)</span><br></pre></td></tr></table></figure><p><strong>dict 是一种空间换时间的方法.</strong></p><p><strong>dict 的 key 值是不可变对象</strong></p><p>因为 key 值决定了 value 的存储位置,如果 key 值变化,则整个 dict 就陷入了混乱.</p><p>list 是可变的,故 list 不能为 key.</p><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>set 是无序无重复的元素集合</p><p><strong>创建一个 set, 需要提供一个 list 作为输入集合</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#声明</span></span><br><span class="line">&gt;&gt;&gt;s = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">#重复元素会被自动过滤</span></span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#添加元素</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#删除元素</span></span><br><span class="line">s.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#可以做 交集,并集等操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>list是有序可变,中括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'ad'</span>,<span class="number">123</span>,<span class="literal">False</span>]</span><br></pre></td></tr></table></figure><p>tuple 是有序不可变,小括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="string">'ada'</span>,<span class="number">1231</span>,list,[<span class="string">'dsa'</span>,<span class="string">'dasda'</span>])</span><br></pre></td></tr></table></figure><p>dict 是无序, key-value ,中括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Ad'</span>:<span class="number">96</span>,<span class="string">'Mi'</span>:<span class="number">97</span>&#125;</span><br></pre></td></tr></table></figure><p>set 是无序,无重复,set(list)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'ads'</span>,<span class="string">'dasd'</span>,<span class="number">123</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL导出时 add-drop-table 问题</title>
      <link href="/2017/05/22/DB/title:%20Mysql/"/>
      <url>/2017/05/22/DB/title:%20Mysql/</url>
      
        <content type="html"><![CDATA[<p>在使用 mysqldump 导出数据库某表后,直接使用 导入该 sql 文件,该表内的元数据会被删除.</p><a id="more"></a><p>原来是通过 mysqldump工具导出时,默认情况下会在 create 语句前加 add-drop-table, 导致每个导出文件内都有 droptable 命令.</p><p><img src="http://ojho2g8px.bkt.clouddn.com/2017-05-22-023627.jpg" alt="Screenshot 2017-05-22 AM10.32.16"></p><p>所以需要在导出时加入 –skip-add-drop-table 参数,这样就可以在导入时避免删除掉原有数据.</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 的一些技巧</title>
      <link href="/2017/05/16/Mac/title:%20Mac%20%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/05/16/Mac/title:%20Mac%20%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>在使用 Mac 过程中的一些小技巧和快捷键.</p><a id="more"></a><ul><li><p>通过Command+点击在新窗口中打开Finder侧边栏上的项目</p></li><li><p>Command+鼠标拖拽可以移动后方的窗口，同时不影响前端窗口</p></li><li><p>Command+点击Dock上的图标可以打开应用在Finder中的位置</p></li><li><p>Command+回车Spotlight中的搜索结果可以直接在Finder中查看</p></li><li><p>Command+回车Spotlight中的搜索结果可以直接在Finder中查看</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法和 MWeb 写作使用说明</title>
      <link href="/2017/04/12/Markdown%20%E8%AF%AD%E6%B3%95%E5%92%8C%20MWeb%20%E5%86%99%E4%BD%9C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>/2017/04/12/Markdown%20%E8%AF%AD%E6%B3%95%E5%92%8C%20MWeb%20%E5%86%99%E4%BD%9C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-语法和-MWeb-写作使用说明"><a href="#Markdown-语法和-MWeb-写作使用说明" class="headerlink" title="Markdown 语法和 MWeb 写作使用说明"></a>Markdown 语法和 MWeb 写作使用说明</h1><h2 id="Markdown-的设计哲学"><a href="#Markdown-的设计哲学" class="headerlink" title="Markdown 的设计哲学"></a>Markdown 的设计哲学</h2><blockquote><p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p></blockquote><a id="more"></a><h2 id="本文约定"><a href="#本文约定" class="headerlink" title="本文约定"></a>本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + 4</code> 或 <code>CMD + R</code> 预览才可以看效果。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 第一级标题 &#96;&lt;h1&gt;&#96; </span><br><span class="line">## 第二级标题 &#96;&lt;h2&gt;&#96; </span><br><span class="line">###### 第六级标题 &#96;&lt;h6&gt;&#96;</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题 &lt;h1&gt;"></a>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题 &lt;h2&gt;"></a>第二级标题 <code>&lt;h2&gt;</code></h2><h6 id="第六级标题-lt-h6-gt"><a href="#第六级标题-lt-h6-gt" class="headerlink" title="第六级标题 &lt;h6&gt;"></a>第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*这些文字会生成&#96;&lt;em&gt;&#96;*</span><br><span class="line">_这些文字会生成&#96;&lt;u&gt;&#96;_</span><br><span class="line"></span><br><span class="line">**这些文字会生成&#96;&lt;strong&gt;&#96;**</span><br><span class="line">__这些文字会生成&#96;&lt;strong&gt;&#96;__</span><br></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p><p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p><p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 项目一 无序列表 &#96;* + 空格键&#96;</span><br><span class="line">* 项目二</span><br><span class="line">* 项目二的子项目一 无序列表 &#96;TAB + * + 空格键&#96;</span><br><span class="line">* 项目二的子项目二</span><br></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p><ul><li>项目一 无序列表 <code>* + 空格键</code></li><li>项目二</li><li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li><li>项目二的子项目二</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 项目一 有序列表 &#96;数字 + . + 空格键&#96;</span><br><span class="line">2. 项目二 </span><br><span class="line">3. 项目三</span><br><span class="line">1. 项目三的子项目一 有序列表 &#96;TAB + 数字 + . + 空格键&#96;</span><br><span class="line">2. 项目三的子项目二</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>项目一 有序列表 <code>数字 + . + 空格键</code></li><li>项目二 </li><li>项目三</li><li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li><li>项目三的子项目二</li></ol><h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 任务一 未做任务 &#96;- + 空格 + [ ]&#96;</span><br><span class="line">- [x] 任务二 已做任务 &#96;- + 空格 + [x]&#96;</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li><input disabled="" type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li><input checked="" disabled="" type="checkbox"> 任务二 已做任务 <code>- + 空格 + [x]</code></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![GitHub set up](http:&#x2F;&#x2F;zh.mweb.im&#x2F;asset&#x2F;img&#x2F;set-up-git.gif)</span><br><span class="line">格式: ![Alt Text](url)</span><br></pre></td></tr></table></figure><p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p><p>MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 <code>-w + 图片宽度</code> 即可，比如说要设置上面的图片的宽度为 140，语法如下：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up-w140"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email &lt;example@example.com&gt;</span><br><span class="line">[GitHub](http:&#x2F;&#x2F;github.com)</span><br><span class="line">自动生成连接  &lt;http:&#x2F;&#x2F;www.github.com&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p><p>Email 连接： <a href="mailto:&#101;&#120;&#97;&#109;&#x70;&#x6c;&#x65;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#99;&#x6f;&#109;">&#101;&#120;&#97;&#109;&#x70;&#x6c;&#x65;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#99;&#x6f;&#109;</a><br><a href="http://github.com" target="_blank" rel="noopener">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a> 这样</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">某某说:</span><br><span class="line">&gt; 第一行引用</span><br><span class="line">&gt; 第二行费用文字</span><br></pre></td></tr></table></figure><p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p><p>某某说:</p><blockquote><p>第一行引用<br>第二行费用文字</p></blockquote><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">像这样即可：&#96;&lt;addr&gt;&#96; &#96;code&#96;</span><br></pre></td></tr></table></figure><p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p><p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p><h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一格表头 | 第二格表头</span><br><span class="line">--------- | -------------</span><br><span class="line">内容单元格 第一列第一格 | 内容单元格第二列第一格</span><br><span class="line">内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>第一格表头</th><th>第二格表头</th></tr></thead><tbody><tr><td>内容单元格 第一列第一格</td><td>内容单元格第二列第一格</td></tr><tr><td>内容单元格 第一列第二格 多加文字</td><td>内容单元格第二列第二格</td></tr></tbody></table><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p><p>加删除线像这样用： <del>删除这些</del></p><p>效果如下：</p><p>加删除线像这样用： <del>删除这些</del></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">块级公式：</span><br><span class="line">$$x &#x3D; \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</span><br><span class="line"></span><br><span class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; &#x3D;</span><br><span class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</span><br><span class="line"></span><br><span class="line">行内公式： $\Gamma(n) &#x3D; (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure><p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p><p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p><p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注：[^sample_footnote]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是一个脚注：<a href="这里是脚注信息">^sample_footnote</a></p><h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment --><!-- more --><p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>[TOC]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2017/03/13/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E2%80%94%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/03/13/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E2%80%94%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>数据 未处理的。</p><p>知识 已经经过处理和分析。</p><p>模式</p><p>信息 含义广泛，包含未处理和已处理。</p><h2 id="数据挖掘—将数据转换成知识"><a href="#数据挖掘—将数据转换成知识" class="headerlink" title="数据挖掘—将数据转换成知识"></a>数据挖掘—将数据转换成知识</h2><p>KDD（knowledge discovery form data）知识发现 等同于数据挖掘</p><p>在各个行业，对数据挖掘的认识不同，因为他们所受的教育和氛围以及基础知识，让他们在细微地方不同。</p><p>数据挖掘特点</p><ul><li>数据真实</li><li>数据海量</li><li>决策者的随机查询</li><li>挖掘出来的知识一般不能预知，是潜在的新颖知识 </li></ul><h6 id="数据挖掘的功能-6类"><a href="#数据挖掘的功能-6类" class="headerlink" title="数据挖掘的功能 6类"></a>数据挖掘的功能 6类</h6><ul><li>概念描述 concept description</li><li>关联关系（Association）</li><li>分类和预测（）</li></ul><p>​         分类—离散的数据     预测—l连续的数据</p><ul><li>聚类分析（cluster analysis）</li><li>异常分析  </li><li>趋势和演化分析（Trend and evolution analysis）</li></ul><h5 id="判断发现模式是否有趣（interesting）"><a href="#判断发现模式是否有趣（interesting）" class="headerlink" title="判断发现模式是否有趣（interesting）"></a>判断发现模式是否有趣（interesting）</h5><p>分为主观和客观两个方面。</p><h6 id="数据挖掘框架"><a href="#数据挖掘框架" class="headerlink" title="数据挖掘框架"></a>数据挖掘框架</h6><ul><li>Techniques</li><li>Applications</li><li>Principles (imp)  </li></ul><h5 id="数据挖掘的分类"><a href="#数据挖掘的分类" class="headerlink" title="数据挖掘的分类"></a>数据挖掘的分类</h5><h5 id="数据挖掘算法的组件化思想-（IMP）"><a href="#数据挖掘算法的组件化思想-（IMP）" class="headerlink" title="数据挖掘算法的组件化思想 （IMP）"></a>数据挖掘算法的组件化思想 （IMP）</h5><p>五个标准组件</p><ul><li>模型和模式结构</li><li>数据挖掘任务</li><li>评分函数</li><li>搜索和优化方法   <strong>效果</strong></li><li>数据管理策略  <strong>效率</strong></li></ul><p>模型是全局的，模式是局部的。两者相互联系。</p><p>当面对一个新的应用时，数据挖掘人员应该从组件的角度，根据应用需求，考虑应该选取哪些组件，来组成一个新的算法，而不是考虑哪个现成的算法。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
